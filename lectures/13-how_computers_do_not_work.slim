= slide 'Въпрос 1' do

  p Какво са built-in функциите в Питон?

  ul.action
    li Неща написани на C
    li ... и вградени в интерпретатора (също е написан на C).
    li ... или съществуващи във външни (native) библиотеки


= slide 'Въпрос 2' do

  p Какво може да бъде модул в Питон?

  ul.action
    li *.py файлове
    li Директории с __init__.py в тях
    li *.pyd/*.so, export-ващи функцията PyInit_*


= slide 'Въпрос 3' do

  p Какво са .pyd файловете в Windows? Каква е разликата с DLL?

  ul.action
    li Разширението е разлика
    li Вътрешно форматът е същият

  ul.action
    li Преименуването на подбони файлове е често срещано
    li ... под Linux: *, *.so, *.axf, *.bin, *.elf, *.o, *.prx, *.puff,
    li ... под Windows: *.dll, *.exe, *.ko, *.ocx, *.drv, *.sys, *.icl, *.fon


= slide 'Въпрос 4' do

  p Какво са *.dll/*.so файловете?

  ul.action
    li *.dll/*.so са динамични библиотеки
    li Съкратено от Dynamic Link Library / Shared Object
    li Съдържат машинен (native) код
    li Съдържат import/export таблици
    li Могат да съдържат и други неща


= slide 'Въпрос 5' do

  p Какво са .h файловете?

  ul.action
    li *.h са header файлове. Съдържат текст (код на C/C++/Objective C)
    li Нужни са на програмиста, за да компилира програма, ползващата даден *.dll/*.so
    li Не са нужни на потребител, за да пусне програма компилирана с тях
    li Съдържат информация за типове и сигнатури на функции
    li Съдържат и други неща


= slide 'Въпрос 6' do

  p Какви проблеми решава Python/C API-то?

  ul.action
    li Скорост
    li Достъп до неща, недостъпни попринцип в Питон интерпретатора
    li Преизползване на съществуващ C код в Python


= slide 'Но аз не знам/разбирам/харесвам C?' do

  ul
    li Тези проблеми съществуват независимо дали харесваме C
    li.action Има алтернативи


= slide 'Алтернативи на C API' do

  ul
    li Cyton
    li SWIG
    li ctypes


= slide 'Cyton' do

  ul
    li Отделен език за програмиране
    li.action Надмножество на Python (2 и 3)
    li.action Има възможност да генерира ефективен C код
    li.action Може лесно да вика както C, така и Питон код


= slide 'Cyton (2)' do

  ul
    li Не е част от стандартния Питон
    li Няма да го разглеждаме в детайли


= slide 'SWIG' do

  ul
    li Simplified Wrapper and Interface Generator
    li.action Работи върху C/C++ код
    li.action Генерира Питон модул, който може да бъде import-нат
    li.action В Питон виждаме функции и класове такива, каквито са в C/C++ кода

= slide 'SWIG (2)' do

  lu
    li SWIG поддържа още много езици и среди
    li Python, Ruby, Perl, PHP, Lua, Guile
    li Java, .NET, D, Go
    li ... още много

= slide 'SWIG (3)' do

  li
    ul Не е част от стандартния Питон
    ul Няма да го разглеждаме в детайли

= slide 'SWIG / Cython' do

  ul
    li И двете в крайна сметка генерират *.pyd/*.so файлове
    li.action ... които използват Python/C API-то
    li.action Спестяват ни писането на C код, като го генерират вместо нас


= slide 'Ctypes' do
  p Ctypes позволява да викаме C функции директно от Python без да ни се налага да пишем и капка C код.

  ul
    li Това е може би най-лесният начин


= slide 'Ctypes основни моменти' do
  ul
    li предназначено за комуникация с чист C код -- lean&mean
    li.action стреми се да бъде минимален и да не "пречи", съответно е от сравнително ниско ниво
    li.action зареждане на динамични библиотеки (shared objects, dynamic link libraries a.k.a. DLL)
    li.action викане на функции от тези библиотеки и даже достъпване на данни
    li.action позволява да описваме интерфейса на функциите, които ще ползваме
    li.action позволява дефиниране на потребителски структури и обединения


= slide 'Забележка: Unix vs. Windows' do
  ul
    li разликите са основно в начина на зареждане на библиотеките
    li msvcrt.dll под Windows става на libc.so.6 (или libm.so.6) в Linux


= slide 'Зареждане на библиотеки' do
  example:
    >>> from ctypes import *
    >>>
    >>> libc = cdll.LoadLibrary('msvcrt.dll')
    >>> libc
    <CDLL 'msvcrt.dll', handle 7ffc69b80000 at 6ffffe18ed0>
    >>>


= slide 'Calling conventions' do
  ul
    li cdll - cdecl
    li windll - stdcall, oledll -- само за Windows


= slide 'Извикване на функции' do
  example:
    >>> libc.time(None)
    1243423125


= slide 'Good morning world' do
  example:
    libc.printf(b'good morning world'
                b', the time is %d\n', libc.time(None))
  example:
    good morning world, the time is 1243423807


= slide 'Операционни системи' do

  p.action Парчета код, които управляват хардуера
  p.action Позволяват изпълнението на потребителски програми
  p.action Има ги разни (Windows/Linux/OS X)


= slide 'Kernel' do

  p.action Ядрото (duh) на операционната система
  p.action Има пряк достъп до всичко в компютъра ви
  p.action Грижи се за потребителските програми


= slide 'Драйвъри' do

  p.action Парчета код в ядрото, които управляват конкретен хардуер
  p.action Могат да се слагат отделно от ОС-а


= slide 'Userland' do

  p.action "GNU" частта от "GNU/Linux"
  p.action Полезните програмки, без които една ОС е безполезна
  p.action Текстови редактори, web browser-и, терминали, графични среди, etc


= slide 'User space / Kernel space' do

  p Userland частта вървят в първото
  p Kernel-a върви във второто
  p.action Това е грубо казано, демек е омешано, но така е в общия случай
  p.action Няма общо с root (Linux)/Administrator (Windows)
  p.action Защо е това разделение?
  p.action Сигурност: между отделните процеси, както и между тях и ядрото


= slide '... а какво всъщност са процеси?' do

  p Това са потребителските програми
  p.action Всеки е разделен от всички останали
  p.action Всеки има свое виждане за паметта


= slide '... а какво всъщност е виртуална памет?' do

  p Паметта, до която имат достъп процесите
  p.action Те НЯМАТ достъп до истинските адреси във физическата памет
  p.action Всеки процес има собствена като те не се застъпват
  p.action Всеки процес има право да достъпи пълното адресно пространство
  p.action Виртуалната памет може да не е във физическата (swap file, memory mapped files, etc)


= slide 'Как User space достъпва kernel space' do

  p През така наречените System Calls
  p Това са обикновени функции, които можем да викаме
  p Намират се в стандартната С блиотека, която върви с всяка ОС
  p Те вътрешно ще направят магията
  p Магията се нарича interrupt-и


= slide '... а какво всъщност са interrupt-и?' do

  p Начин да кажем на ядрото, че искаме нещо да се случи (sys call)
  p Както и начин на процесора да каже на ядрото, че нещо е станало (timer interrupt)


= slide 'Как изглежда един процес във виртуалната памет?' do

  p Всеки процес, очевидно, има изпълним код
  p Stacks, heeps, read-only segments
  p Отделно има и mapped files, etc


= slide 'Изпълнимите файлове на твърдия диск' do

  p.action Съдържа кода на приложението
  p.action Може да съдържа кода на външни библиотеки
  p.action Или просто имената на тези външни зависимости
  p.action Примерна зависмист е стандартната С библиотека


= slide 'Как получаваме изпълними файлове?' do

  p.action Чрез компилация и линкване
  p.action Компилацията превежда отделен файл с програмен код към машинни инструкции
  p.action Линкването "свързва" отделни компилирани единици
  p.action Какво правим с външни зависимости, които не са наш код?
  p.action Като например printf от стандартната С библиотека?


= slide 'Static linking' do

  p Когато кодът на нужните библиотеки е в изпълнимия файл


= slide 'Dynamic linking' do

  p.action В изпълнимия файл има единствено имена на библиотеки и функции
  p.action Пример: libc.so:printf или msvcrt.dll:printf
  p.action ОС-а се грижи да "зареди" библиотеката и да навърже адресите


= slide 'static VS dynamic linking' do

  p.action По-големи изпълними файлове при статично линкване
  p.action Малко по-бързо изпъленение при статично линкване
  p.action Няма споделяне на код в обща библиотека при статично линкване

= slide 'Конкурентност vs. паралелизъм?' do
  p anyone?

= slide 'Похвати за конкурентност?' do
  list:
    процеси
    нишки
    "зелени" нишки

  p.action зелена нишка ∈ системна нишка ∈ процес

= slide 'Интернета накратко' do
  li.action Можем да свържем устройствата си в обща мрежа.
  li.action Устройствата могат да разменят информация.
  li.action Това става посредством спазването на определни протоколи.
  li.action Днес ще поговорим (крайно недостатъчно) на тази тема.

= slide 'Мрежата' do
  p За да свържем компютрите в мрежа използва рутери (или суичове).
  img src='10/internet-schema-3.png'

= slide 'Различните мрежи могат да бъдат свързани една с друга' do
  p За да свържем две (или повече) мрежи заедно използваме рутери.
  img src='10/internet-schema-5.png'

= slide 'Пакети' do
  li.action Съобщенията, които пращаме към други участници в мрежата, се нарязват на парчета, наречени пакети.
  li.action Всеки пакет се праща по мрежата, независимо от останалите пакети.
  li.action Протоколите на различните "слоеве" на мрежата обличат/събличат пакета с метаданни.

= slide 'Пакети' do
  img src='10/ip-diagram.png'

= slide 'Internet Protocol (IP)' do
  li.action Грижи се да пренесе пакетите от изпращача (source) към получателя (destination).
  li.action Структурата му е с два компонента: header и payload.
  li.action header-а включва информацията за source и destination адресите.
  li.action Загуби на пакети са съвсем възможни.
  li.action IPv4 (e.g. 128.42.13.79) и IPv6 (e.g. 2001:0db8:0000:0000:0000:8a2e:0370:7334)
  li.action
    | Отнася се към третия - Network layer - на 
    a href="https://en.wikipedia.org/wiki/OSI_model" OSI модела.

= slide 'Transmission Control Protocol (TCP)' do
  li.action При нарязването на съобщението, TCP номерира пакетите.
  li.action Грижи се да сглоби в правилен ред пристигащите от мрежата пакети.
  li.action Получателят периодично изпраща acknowledgement пакет обратно към изпращача, за да го уведоми колко от пакетите е получил.
  li.action Ако получателят установи, че има липсващи пакети, поисква от изпращача да му ги изпрати отново.
  li.action Отнася се към четвъртия - Транспортен - слой от OSI.

= slide 'User Datagram Protocol' do
  li.action Алтернативен на TCP транспортен протокол.
  li.action Няма гаранция за ред на съобщенията.
  li.action Няма гаранция за пристигането им.
  li.action По-лек и бърз от TCP.
  li.action Може да broadcast-ва съобщения към много получатели.

= slide 'Client-server модел' do
  li.action Модел за структуриране на дистрибутирани системи.
  li.action Сървърът предоставя ресурси, при поискване от клиента.
  li.action Обикновено сървърът и клиентът комуникират по мрежата, но това не е задължително.
  li.action Необходимо е да спазват общ протокол, за да могат да се разбират.

= slide 'HTTP' do
  li.action Протокол, който (обикновено) работи върху TCP.
  li.action Клиентът поисква от сървъра ресурс, използвайки Unified Resource Locator (URL).

= slide 'HTTP' do
  li Протокол, който (обикновено) работи върху TCP.
  li Клиентът поисква от сървъра ресурс, използвайки Unified Resource Locator (URL).
  p
    |
    |
  img src='10/url.png'
  li.action Сървърът обработва заявката и връща отговор.

= slide 'Какво включва една HTTP заявка?' do
  li.action Метод: GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH
  li.action Път, например:/users/1
  li.action
    a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields" Request headers
  li.action Опционално Request body

= slide 'HTTP методи' do
  img src="10/http-methods.png"

= slide 'HTTP response' do
  li.action
    | Статус код (например 200 OK или 404 NOT FOUND); 
    a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" Списък на всички кодове
  li.action
    a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Response_fields" Response headers
  li.action Опционално Response body (например HTML или JSON документ)

= slide 'Representational state transfer (REST)' do
    ul
      li.action Архитектурен модел за уеб сървиси.
      li.action
        | Принципи:
        ul
          li.action Client-Server
          li.action
            | Uniform interface
            ul
              li.action Resource identification in requests
              li.action Resource manipulation through representations
              li.action Self-descriptive messages
              li.action Hypermedia as the engine of application state
          li.action Stateless
          li.action Cacheable
          li.action Layered System

= slide 'Малко Flask' do
  img src="10/flask-logo.png"

= slide 'Какво е Flask?' do
  p.action Минималистичен web framework.
  p.action (Framework vs library? Anyone?)

= slide 'Инсталация' do
  example:
    pip install Flask

= slide 'Първото ни Flask уеб приложение' do
  example:
    from flask import Flask
    app = Flask(__name__)

    @app.route('/')
    def hello_world():
        return 'Hello, World!'

  p За да го пуснем е необходимо само да го запишем във файл, да речем <b>hello.py</b>, и след това да изпълним:

  example:
    export FLASK_APP=hello.py
    flask run

= slide 'Демо' do
  p Generic elevator music starts.

= slide 'Комуто му се чете' do
  p
    a href="https://flask.palletsprojects.com/en/1.1.x/#user-s-guide" Flask User's Guide

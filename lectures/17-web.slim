= slide 'Имате домашно' do
    p предадените решения са цифром и словом 0(НУЛА)

= slide '' do
    img src="17/you-make-bunny-cry.jpg"

= slide 'Паяжина' do
    p Ще ви говорим за третото 'w' от 'www'
    p.action Как тъй краткия текст "facebook.com" ви навежда на мисли със син фон, пълни със снимките от нереално красивите и интересни ваканции на приятелите ви.
    p.action С какво "facebook.com" е различно от "чорба с праз"? И двете са текст от 13 символа

= slide 'HTTP' do
    p.action Client-Server протокол, за раздаване на документи
    p.action Измислен е с цел споделяне на научни документи
    p.action Това значи предимно текст, леко форматиран и (недай си Боже!) някоя картинка

= slide 'HTTP/1.1' do
    p.action От това нещо някак се раждат неща като twitter, facebook, amazon

= slide 'HTTP/2.0' do
    p <a href="https://tools.ietf.org/html/rfc7540">RFC</a> по темата
    p <a href="http://w3techs.com/technologies/details/ce-http2/all/all">Според w3tech</a> около 7.5% от сайтовете вече го поддържат към април тази година

= slide 'the basics' do
    p Когато искаме да направим връзка с друга машина през мрежата
    p.action операционната система знае през кое мрежово устройство да изпрати пакет, който е предназначен за някой IP адрес
    p.action най-често това означава, че пакета стига до вашия gateway(примерно рутера ви вкъщи), който знае на къде да го изпрати, за да стигне до крайната си цел
    p.action от вашата мапина до целта обикновено се минава през много на брой други машини(hop-ове)
    p.action ако връзката е TCP(няма да мислим за други за сега) имаме гаранция, че всички изпратени пакети са доставени, тъй като получаваме потвърждения и при неуспех изпращаме отново

    p.action от гледна точка на вашия код всички тези неща изглеждат доста просто

= slide 'HTTПротокола' do
    p.action Текстов
    p.action Без състяние
    p.action Клиента праща "заявка", сървъра отговаря с "отговор"

= slide 'От какво се състоят' do
    p.action И двете се сътоят от headers и body
    p.action "Мета" данни и данни

= slide 'Headers' do
    p.action Ключ: Стойност
    p.action Описани са в стандарта

= slide 'Body' do
    p.action Каквато и да е купчина от байтове

= slide 'Заявка пример' do
    
    example:

    GET /hello HTTP/1.1
    Host: www.example.com
    Accept: text/plain

= slide 'Отговор' do

    example:

    HTTP/1.1 200 OK
    Date: Mon, 23 May 2005 22:38:34 GMT
    Server: Apache/1.3.3.7 (Unix) (Red-Hat/Linux)
    Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
    ETag: "3f80f-1b6-3e1cb03b"
    Content-Type: text/plain; charset=UTF-8
    Content-Length: 12
    Accept-Ranges: bytes
    Connection: close

    Hello Wolrd!

= slide 'socketserver' do
    p Просто TCP сървър
    example:
      import socketserver

      class MyTCPHandler(socketserver.BaseRequestHandler):
          """
          The request handler class for our server.

          It is instantiated once per connection to the server, and must
          override the handle() method to implement communication to the
          client.
          """

          def handle(self):
              # self.request is the TCP socket connected to the client
              self.data = self.request.recv(1024).strip()
              print("{} wrote:".format(self.client_address[0]))
              print(self.data)
              # just send back the same data, but upper-cased
              self.request.sendall(self.data.upper())

      if __name__ == "__main__":
          HOST, PORT = "localhost", 9999

          # Create the server, binding to localhost on port 9999
          server = socketserver.TCPServer((HOST, PORT), MyTCPHandler)

          # Activate the server; this will keep running until you
          # interrupt the program with Ctrl-C
          server.serve_forever()


= slide 'http.server' do
    p Строи върху socketserver с HTTP протокола

    example:
      from http.server import BaseHTTPRequestHandler, HTTPServer
       
      # HTTPRequestHandler class
      class testHTTPServer_RequestHandler(BaseHTTPRequestHandler):
       
        # GET
        def do_GET(self):
              # Send response status code
              self.send_response(200)
       
              # Send headers
              self.send_header('Content-type','text/html')
              self.end_headers()
            
              # Send message back to client
              message = "Hello world!"
              # Write content as utf-8 data
              self.wfile.write(bytes(message, "utf8"))
              return
       
      def run():
        print('starting server...')
       
        # Server settings
        # Choose port 8080, for port 80, which is normally used for a http server, you need root access
        server_address = ('127.0.0.1', 8081)
        httpd = HTTPServer(server_address, testHTTPServer_RequestHandler)
        print('running server...')
        httpd.serve_forever()
       
       
      run()

= slide 'http.client' do
    p Клиетска библиотека за HTTP
    p Най - често ще е по - добре да използвате urllib.request


= slide 'Имена' do
    p.action Спомняте ли си facebook.com? Какво е това .com в крайна сметка?
    p.action Компютрите не разбират от имена на човешки език, комуникират чрез Internet Protocol
    p.action Всеки (почти) компютър в паяжината има уникален (почти) IP address, който се използва за комуникация

= slide 'DNS' do
    p.action Трябва да се случи превеждане от facebook.com до IP адрес, например 173.252.120.6
    p.action Domain Name System върши това
    p.action Това е глобална, централизирана и същевременно разпределена (what!?) и изключително добре обмислена система
    p.action Централизира и разпределена?

= slide 'DNS in python' do
    p socket.gethostbyname и socket.gethostbyname_ex

= slide 'Frameworks' do
  p много на брой
  ul
    li Django
    li Flask
    li Muffin
    li Pyramid
    li Tornado
    li Bottle
    li ...

= slide 'задачата им' do
  ul
    li url routing
    li сервриране на HTML / XML / JSON / text / etc.
    li database манипулации
    li security features (csrf)
    li сесии


= slide 'flask' do
  p пример
  example:
    from flask import Flask

    app = Flask(__name__)


    @app.route("/")
    def hello():
        return "Hello flask!"


    if name == "__main__":
        app.run()

  p после

  example:
    pip install Flask
    python hello.py


= slide 'muffin' do
  example:
    import muffin

    app = muffin.Application('example')
    @app.register('/', '/hello/{name}')

    def hello(request):
        name = request.match_info.get('name', 'anonymous')
        return 'Hello %s!' % name

  p после

    pip install muffin
    python3 hello.py run

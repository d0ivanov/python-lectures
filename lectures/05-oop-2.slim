= slide 'ООП част 2' do
  p Обектно-ориентирано програмиране част втора

= slide 'Какво характеризира ООП?' do
  p.action Абстракция
  p.action Енкапсулация
  p.action Модулярност


= slide 'Какво не е наред?' do
  example:
    class Muffin:
        def __init__(color, taste, calories):
            self.color = color
            self.taste = taste
            self.calories = calories

= slide 'Точно така!' do

  example:
    >>> yum = Muffin("Green", "sweet", 420)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
      TypeError: __init__() takes 3 positional arguments but 4 were given

= slide 'Какво е self?' do
  p.action по конвенция така се кръщава първия аргумент на методите на клас

= slide 'В такъв случай' do
  p Трябва ли всеки метод на един клас да приема self като първи аргумент?
  ul
    li.action Когато метода е декориран със <code>@staticmethod</code>
    li.action Когато метода е декориран с <code>@classmethod</code> първият метод ще е самият клас. Конвенцията е при такъв случай да кръщаваме аргумента <code>cls</code>
    li.action Защо не може да кръстим аргумента <code>class</code>?
    li.action ...<code>class</code> e запазена дума


= slide 'Fennec' do
  example:
    >>> class Fennec:
    ...     def __init__(self, name):
    ...         self.name = name
    ... 
    >>> pesho = Fennec('Пешо')
    >>> pesho.name
    'Пешо'
    >>> pesho.age
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: 'Fennec' object has no attribute 'age'
    >>> pesho.age = 2
    >>> pesho.age
    2


= slide 'del' do
  p с ключовата дума <code>del</code> можем да изтриваме атрибути на обект
  example:
    >>> del pesho.age
    >>> pesho.age
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: 'Fennec' object has no attribute 'age'

  div.action
    example:
      >>> pesho.name
      'Пешо'
      >>> del pesho.name
      >>> pesho.name
      Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
      AttributeError: 'Fennec' object has no attribute 'name'

= slide 'В __init__ не се случва нищо магическо' do
  pass


= slide 'And now for something completely different…' do
  pass


= slide 'Vector' do
  example:
    class Vector:
        def __init__(self, x, y, z):
            self.x = x
            self.y = y
            self.z = z

    v = Vector(3, 4, 5)
    print(v.x)

= slide 'Не може ли малко по-удобно?' do
  p Ако си мислим за математическата абстракция вектор, тя често пъти има смисъла и на наредена енторка.
  p Защо тогава да не можем да я третираме като такава?

  example:
    v[0] == v.x
    v[1] == v.y
    v[2] == v.z


= slide '__getitem__' do
  example:
    class Vector:
        …
        def __getitem__(self, i)
            return (self.x, self.y, self.z)[i]


= slide 'Vector (8)' do
  p Нашия вектор може да бъде ползван като колекция
  example:
    class Vector:
        def __init__(self, x, y, z):
            self.x = x
            self.y = y
            self.z = z

        def __getitem__(self, i):
            return (self.x, self.y, self.z)[i]

        def __str__(self):
            return str((self.x, self.y, self.z))

        def __len__(self):
            return 3

        def __add__(self, other):
             return Vector(*map(sum, zip(self, other)))


= slide 'Ами присвояване?' do
  p Какво ще се случи тук?

  example:
    v = Vector(3, 4, 5)
    v[0] = 8

  div.action
    example:
      TypeError: 'Vector' object does not support item assignment

= slide 'Ами, присвояване!' do

  example:
    class Vector:
        …
        def __setitem__(self, index, value):
            if index == 0:
                self.x = value
            elif index == 1:
                self.y = value
            elif index == 2:
                self.z = value
            else:
                pass # тук можем да възбудим изключение

    v = Vector(1, 2, 3)
    v[1] = 10
    print(v.y) # 10


= slide 'Атрибути' do
  ul
    li <code>getattr(obj, 'name')</code> е като <code>obj.name</code>
    li <code>setattr(obj, 'name', value)</code> е като <code>obj.name = value</code>
    li <code>delattr(obj, 'name')</code> е като <code>del obj.name</code>

  example:
    class Spam: pass

    spam = Spam()

    spam.eggs = "Eggs"
    print(getattr(spam, 'eggs')) # Eggs

    setattr(spam, 'bacon', 'Spam, eggs and bacon')
    print(spam.bacon) # Spam, eggs and bacon


= slide 'Атрибути (2)' do
  p Може да дефинирате <code>__getitem__</code> и <code>__setitem__</code> по-компактно
  example:
    class Vector:
        def __init__(self, x, y, z): ...

        def __getitem__(self, i):
            return getattr(self, ('x', 'y', 'z')[i])

        def __setitem__(self, index, value)
            return setattr(self, ('x', 'y', 'z')[i], value)


= slide 'Атрибути (3)' do
  p <strike>Може да предефинирате "оператора точка"</strike>
  p Може да предефинираме достъпването на атрибути на нашите обекти
  ul
    li.action <code>__getattr__(self, name)</code> за <code>object.name</code>
    li.action <code>__setattr__(self, name, value)</code> за <code>object.name = 'Foo'</code>
    li.action <code>__delattr__(self, name)</code> за <code>del object.name</code>


= slide 'Атрибути (4)' do
  p <code>__getattr__(self, name)</code> се извиква само ако обекта няма атрибут <code>name</code>.
  example:
    class Spam:
        def __init__(self):
            self.eggs = 'larodi'

        def __getattr__(self, name)
            return name.upper()

        def answer(self)
            return 42

    spam = Spam()
    print(spam.foo) # FOO
    print(spam.bar) # BAR
    print(spam.eggs) # larodi
    print(spam.answer()) # 42


= slide 'Атрибути (5)' do
  p __setattr__ се извиква, когато присвоявате стойност на атрибут на обект.
  p За да не изпаднете в безкрайна рекурсия, ползвайте <code>object.__setattr__</code>.
  example:
    class Spam:
        def __setattr__(self, name, value):
            print("Setting {0} to {1}".format(name, value))
            return object.__setattr__(self, name.upper(), value + 10)

    spam = Spam()
    spam.foo = 42
    print(spam.FOO) # 52
    print(spam.foo) # грешка!


= slide 'Атрибути (6)' do
  list:
    `__getattr__` се извиква само когато в обекта няма такъв атрибут.
    За да предефинирате достъпа до атрибут винаги, може да ползвате `__getattribute__`.(може да е tricky)


= slide 'Обектите и питоните' do
  p Можем да разглеждаме всеки обект като съвкупност от две неща:
  ol
    li речник, съдържащ атрибутите на обекта (атрибута <code>__dict__</code> на обекта)
    li връзка към класа на обекта (атрибута <code>__class__</code> на обекта)

  example:
    class Spam: pass

    spam = Spam()
    spam.foo = 1
    spam.bar = 2
    print(spam.__dict__) # {'foo': 1, 'bar': 2}
    print(spam.__class__) # <class '__main__.Spam'>
    print(spam.__class__ is Spam) # True


= slide 'Обектите и питоните (2)' do
  p Функциите и променливите дефинирани в тялото на класа са атрибути на класа.
  example:
    class Spam:
        def foo(self):
            return 1

        bar = 42

    print(Spam.foo) # <function foo at 0x0c4f3b4b3>
    print(Spam.bar) # 42


= slide 'Обектите и питоните (3)' do
  p Когато срещне кода <code>baba.attr</code> python прави следните неща:
  ol
    li.action Връща стойността на <code>baba.__dict__['attr']</code>
    li.action 
      span Ако не намери, търси <code>baba.__class__.attr</code>
      ul
        li ако не е функция се връща директно
        li ако е функция, се връща bound method
    li.action Ако го няма и там се вика <code>baba.__getattr__('attr')</code>


= slide 'Обектите и питоните (4)' do
  ol
    li.action В Python има наследяване
    li.action Всичко наследява от <code>object</code>
    li.action Предния слайд описва какво прави <code>object.__getattribute__</code>
    li.action Можете да го предефинирате (стига да имате причина)

  p.action Познайте дали имате причина?


= slide 'Наследяване' do
  example:
    class Person:
        def __init__(self, first_name, last_name):
            self.first_name = first_name
            self.last_name = last_name

        def name(self):
            return self.first_name + " " + self.last_name

    class Star(Person):
        def greet_audience(self):
            print("Hello Sofia, I am {0}!".format(self.name()))

    david = Star("David", "Gahan")
    david.greet_audience()
    # Hello Sofia, I am David Gahan!


= slide 'Наследяване (2)' do
  example:
    class Person:
        def __init__(self, first_name, last_name):
            self.first_name, self.last_name = first_name, last_name

        def name(self):
            return "{0} {1}".format(self.first_name, self.last_name)

    class Japanese(Person):
        def name(self):
            return "{0} {1}".format(self.last_name, self.first_name)

    print(Person("Edward", "Murdsone").name()) # Edward Murdstone
    print(Japanese("Yukihiro", "Matsumoto").name()) # Matsumoto Yukihiro


= slide 'Наследяване (3)' do
  example:
    class Person:
        def __init__(self, first_name, last_name):
            self.first_name, self.last_name = first_name, last_name

        def name(self)
            return "{0} {1}".format(self.first_name, self.last_name)

    class Doctor(Person):
        def name(self):
            return "{0}, M.D.".format(Person.name(self))

    print(Doctor("Gregory", "House").name()) # Gregory House, M.D.


= slide 'Множествено наследяване' do
  example:
    class Spam:
        def spam(self): return "spam"

    class Eggs:
        def eggs(self): return "eggs"

    class CheeseShop(Spam, Eggs):
        def food(self):
            return self.spam() + " and " + self.eggs()

= slide 'Mixins' do
  ul
    li.action Миксините са добра причина (една от малкото) за използване на множествено наследяване
    li.action Миксин класовете не се използват сами по себе си. Те са написани за да се наследяват.
    li.action Можете да гледате на Mixin като интерфейс с имплементирани методи
    li.action 
      p Има два главни случая в които е добра идея да използвате Миксини
      ul
        li.action Когато искате да "забъркате" множество атрибути и методи в един клас
        li.action Когато искате клас който предлага само едно поведение и искате да го ползвате само като част от много други класове

= slide 'Mixins (2)' do
  p Гледайте на миксините като резервни части които не можете да ползвате сами по себе си, но можете да сглобите нещо от тях
  example:
    class Screen: # ...
    class RadioTransmitter: # ...
    class GSMTransmitter(RadioTransmitter): # ...
    class Input: # ...
    class MultiTouchInput(Input): # ...
    class ButtonInput(Input): # ...
    class MassStorage: # ...
    class ProcessingUnit: # ...

    class Phone(ProcessingUnit, Screen, GSMTransmitter,
                MultiTouchInput, ButtonInput, MassStorage): # ...

    class Tablet(ProcessingUnit, Screen, RadioTransmitter,
                 MultiTouchInput, MassStorage): # ...

= slide 'Mixins (3)' do
  example:
    class Serializable: # ...
    class NetworkSupport: # ...

= slide 'private и protected' do
  ol
    li В Python енкапсулацията е въпрос на добро възпитание
    li Имена от типа _име са protected
    li Имена от типа __име са private
    li Интерпретатора променя имената от тип __име до _клас__име. Нарича се name mangling и създава ефект, подобен на този в C++/Java.
  example:
    class Spam:
        def __init__(self):
            self.__var = 42

    print(dir(Spam())) # ['_Spam__var', '__class__', ...]

= slide 'private и protected (2)' do
  example:
    class Base:
        def __init__(self, name, age):
            self.__name = name
            self._age = age
        def report_base(self):
            print("Base:", self.__name, self._age)

    class Derived(Base):
        def __init__(self, name, age, derived_name):
            Base.__init__(self, name, age)
            self.__name = derived_name
            self._age = 33
        def report_derived(self):
            print("Derived:", self.__name, self._age)

    derived = Derived("John", 0, "Doe")
    print(derived.report_base()) # Base: John 33
    print(derived.report_derived()) # Derived: Doe 33
    print(derived._Base__name, derived._Derived__name, sep=', ') # John, Doe

= slide 'isinstance и issubclass' do
  example:
    print(isinstance(3, int)) # True
    print(isinstance(4.5, int)) # False

    print(issubclass(int, object)) # True
    print(issubclass(float, int)) # False


= slide 'Вградените работи на Python' do
  example:
    >>> def f(): pass
    ...
    >>> f
    <function f at 0x7f2d565b8f28>

    >>> print
    <built-in function print>


= slide 'Защо тези работи са такива?' do
  ul
    li Повечето Пайтън е написан на Пайтън
    li.action ... например datetime, functools, etc
    li.action Но и доста е написано на С
    li.action ... например print
    li.action Понякога се прави за скорост
    li.action Понякога се прави, защото трябва да работиш "на ниско ниво"


= slide 'Това не се отнася само за функции' do
  example:
    >>> class MyClass(): pass
    ...
    >>> MyClass
    <class '__main__.MyClass'>
    >>> MyClass.x = 1

    >>> int
    <class 'int'>
    >>> int.x = 1
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: can't set attributes of built-in/extension type 'int'


= slide 'За кои става дума?' do
  ul
    li int, float, str, list, dict, set, и още...
    li.action (map и filter също са вградени типове, между другото, а не фунцкии)


= slide 'Искате да видите код?' do
  p
    a href='https://github.com/python/cpython/blob/6aea3c26a22c5d7e3ffa3d725d8d75dac0e1b83b/Objects/object.c#L346' target='_blank'
      | Код!


= slide 'Специални функции в С кода' do
  p Забелязахте ли pattern-а в имената на функциите в С кода?
  ul
    li.action PyObject_print, PyObject_Str, PyErr_format, ...
    li.action pattern-a е Py(Type)_(Function)


= slide 'Примери за функции, тип' do
  ul
    li PyDict_New, PyDict_Contains, PyDict_SetItem
    li PyDict_SetItemString, PyDict_GetItem
    li PyDict_GetItemString, PyDict_Size, PyDict_Merge, PyDict_Update
    li PyList_ New, PyList_Size, PyList_GetItem
    li PyList_SetItem, PyList_Insert, PyList_Append
    li PyList_GetSlice, PyList_Sort, PyList_Reverse
    li и т.н.


= slide 'Какво за Бога?!' do
  ul
    li Чрез тези функции е имплементиран Пайтън
    li.action Това е т.нар. Python C API
    li.action Ние можем също да ги ползваме


= slide 'Защо?' do
  p Защо по * трябва да ползвам C?
  ul
    li.action Искам си указателите!
    li.action Пайтън е бавеееен! (Numpy, Mercurial)
    li.action Три пъти мери, един път режи! (profile, cProfile)
    li.action Имаме готов C код, който искаме да преизползваме (Numpy, PyGTK+, PyObjC и Cocoa)
    li.action Пайтън е интересен език, но искаме да е още по-интересен (Stackless)


= slide 'Python + C > Python' do
  p Две е повече от едно
  ul
    li.action Пайтън не е подходящ за всичко
    li.action Просто понякога е по-добре да напишем част от програмата си на C
    li.action За целта използваме С библиотеки


= slide 'Какво представлява една С библиотека' do
  p Машинен код + header
  ul
    li.action Под Linux такива файлове са с разширение .so
    li.action Под Windows те са .dll
    li.action В header-ите няма разлика - те са "универсални"


= slide 'Какво съдържа един DLL/so' do
  ul
    li.action Съдържа изпълним код, import таблица, export таблица
    li.action Последната съдържа само имената на функциите за C DLL-и
    li.action Не съдържат, обаче, дефиниции на типове
    li.action Как тогава можем да компилираме код, който използва функции от такива DLL-и?
    li.action С header файлове. Те съдържат дефинициите на типове, декларации на функции и т.н.


= slide 'Demo' do
  ul
    li Под Windows: dumpbin /imports DLLs\python3.dll
    li Под Linux: nm -gD /usr/lib/libpython3.5m.so.1.0


= slide 'Python/C API' do
  ul
    li Хедърите му в Linux, в общия случай, се намират в /usr/include/python{version}/
    li Хедърите му в Windows, в общия случай, се намират в C:\python{version}\include


= slide 'В началото бе Python.h …' do
  ul
    li stdio.h
    li string.h
    li errno.h
    li limits.h
    li assert.h
    li stdlib.h (евентуално)
    li Разни пре-процесори, които трябват на Python


= slide 'C и Python са от две планети' do
  ul
    li int в С не е като int в Пайтън
    li.action string в С не е като string в Пайтън
    li.action Когато искаме да подаваме стойности от едното място към другото, се налага да правим някакво преобръщане
    li.action ... то се нарича marshalling


= slide 'Marshalling към Python' do
  example:
    Py_BuildValue("s", "spam") -> 'spam'
    Py_BuildValue("i", 42) -> 42
    Py_BuildValue("(sii)", 42, "hi", 8) -> (42, 'hi', 8)
    Py_BuildValue("{is,is}", 1, "one", 2, "two") -> {1: 'one', 2: 'two'}
    Py_BuildValue("") -> None


= slide 'Marshalling към C' do
  example:
    const char* string;
    int number;
    PyArg_ParseTuple(args, "si:string_peek", &string, &number)


= slide 'За какво все пак ми е всичко това?' do
  ul
    li Например, когато имате някаква С библиотека, която искате да ползвате през Пайтън
    li.action Вижте всички .pyd файлове, които вървят с Пайтън
    li.action Windows: dir C:\python{version}\DLLs
    li.action Под Linux те са .so (на Arch Linux в /usr/lib/python3.5/lib-dynload)


= slide 'Още въпроси?' do
  ul
    li Страница на курса: http://fmi.py-bg.net/
    li Форуми на курса: http://fmi.py-bg.net/topics/

  p Още интересни неща на
  ul
    li http://docs.python.org/3.5/extending/index.html
    li http://docs.python.org/3.5/c-api/index.html


= slide 'Real programmers write in FORTRAN' do
  ul
    li Real Programmers do List Processing in Fortran.
    li Real Programmers do String Manipulation in Fortran.
    li Real Programmers do Accounting (if they do it at all) in Fortran.
    li Real Programmers do Artificial Intelligence programs in Fortran.
    li Real Programmers aren't afraid to use GOTOs.
    li Real Programmers can write five page long DO loops without getting confused.
    li Real Programmers like Arithmetic IF statements-- they make the code more interesting.
    li Real Programmers write self-modifying code, especially if they can save 20 nanoseconds in the middle of a tight loop.
    li Real Programmers don't need comments-- the code is obvious.
    li Since Fortran doesn't have a structured IF, REPEAT ... UNTIL, or CASE statement, Real Programmers don't have to worry about not using them. Besides, they can be simulated when necessary using assigned GOTOs.


= slide 'The Story of Mel' do
  p Истинският програмист: http://www.pbm.com/~lindahl/mel.html
